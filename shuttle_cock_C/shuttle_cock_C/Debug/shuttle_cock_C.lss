
shuttle_cock_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000002de  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800124  00800124  00000396  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e7c  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000758  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005dc  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00002018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000443  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077a  00000000  00000000  0000250b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002c85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 32       	cpi	r26, 0x27	; 39
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  9e:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_Action>:
	if (row == 0 && pos<16)
	LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
	LCD_Action((pos & 0x0F)|0xC0);
	LCD_Print(str);
}
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	9f 70       	andi	r25, 0x0F	; 15
  aa:	28 2f       	mov	r18, r24
  ac:	20 7f       	andi	r18, 0xF0	; 240
  ae:	92 2b       	or	r25, r18
  b0:	9b b9       	out	0x0b, r25	; 11
  b2:	9b b1       	in	r25, 0x0b	; 11
  b4:	9e 7f       	andi	r25, 0xFE	; 254
  b6:	9b b9       	out	0x0b, r25	; 11
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	92 60       	ori	r25, 0x02	; 2
  bc:	9b b9       	out	0x0b, r25	; 11
  be:	33 e0       	ldi	r19, 0x03	; 3
  c0:	3a 95       	dec	r19
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_Action+0x1a>
  c4:	00 00       	nop
  c6:	9b b1       	in	r25, 0x0b	; 11
  c8:	9d 7f       	andi	r25, 0xFD	; 253
  ca:	9b b9       	out	0x0b, r25	; 11
  cc:	e3 ef       	ldi	r30, 0xF3	; 243
  ce:	f1 e0       	ldi	r31, 0x01	; 1
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_Action+0x2a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_Action+0x30>
  d6:	00 00       	nop
  d8:	2b b1       	in	r18, 0x0b	; 11
  da:	f0 e1       	ldi	r31, 0x10	; 16
  dc:	8f 9f       	mul	r24, r31
  de:	c0 01       	movw	r24, r0
  e0:	11 24       	eor	r1, r1
  e2:	92 2f       	mov	r25, r18
  e4:	9f 70       	andi	r25, 0x0F	; 15
  e6:	89 2b       	or	r24, r25
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	33 e0       	ldi	r19, 0x03	; 3
  f2:	3a 95       	dec	r19
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_Action+0x4c>
  f6:	00 00       	nop
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	8d 7f       	andi	r24, 0xFD	; 253
  fc:	8b b9       	out	0x0b, r24	; 11
  fe:	87 e8       	ldi	r24, 0x87	; 135
 100:	93 e1       	ldi	r25, 0x13	; 19
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_Action+0x5c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_Action+0x62>
 108:	00 00       	nop
 10a:	08 95       	ret

0000010c <LCD_Init>:
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8a b9       	out	0x0a, r24	; 10
 110:	8b e7       	ldi	r24, 0x7B	; 123
 112:	92 e9       	ldi	r25, 0x92	; 146
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_Init+0x8>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_Init+0xe>
 11a:	00 00       	nop
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Action>
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Action>
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Action>
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Action>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Action>
 13a:	87 e8       	ldi	r24, 0x87	; 135
 13c:	93 e1       	ldi	r25, 0x13	; 19
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_Init+0x32>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_Init+0x38>
 144:	00 00       	nop
 146:	08 95       	ret

00000148 <LCD_Clear>:
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Action>
 14e:	87 e8       	ldi	r24, 0x87	; 135
 150:	93 e1       	ldi	r25, 0x13	; 19
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_Clear+0xa>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCD_Clear+0x10>
 158:	00 00       	nop
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Action>
 160:	08 95       	ret

00000162 <LCD_Print>:
 162:	fc 01       	movw	r30, r24
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	34 c0       	rjmp	.+104    	; 0x1d2 <LCD_Print+0x70>
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	90 7f       	andi	r25, 0xF0	; 240
 170:	98 2b       	or	r25, r24
 172:	9b b9       	out	0x0b, r25	; 11
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	81 60       	ori	r24, 0x01	; 1
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_Print+0x20>
 186:	00 00       	nop
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	8d 7f       	andi	r24, 0xFD	; 253
 18c:	8b b9       	out	0x0b, r24	; 11
 18e:	83 ef       	ldi	r24, 0xF3	; 243
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_Print+0x30>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_Print+0x36>
 198:	00 00       	nop
 19a:	4b b1       	in	r20, 0x0b	; 11
 19c:	9c 91       	ld	r25, X
 19e:	80 e1       	ldi	r24, 0x10	; 16
 1a0:	98 9f       	mul	r25, r24
 1a2:	90 01       	movw	r18, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	94 2f       	mov	r25, r20
 1a8:	9f 70       	andi	r25, 0x0F	; 15
 1aa:	29 2b       	or	r18, r25
 1ac:	2b b9       	out	0x0b, r18	; 11
 1ae:	9b b1       	in	r25, 0x0b	; 11
 1b0:	92 60       	ori	r25, 0x02	; 2
 1b2:	9b b9       	out	0x0b, r25	; 11
 1b4:	93 e0       	ldi	r25, 0x03	; 3
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_Print+0x54>
 1ba:	00 00       	nop
 1bc:	9b b1       	in	r25, 0x0b	; 11
 1be:	9d 7f       	andi	r25, 0xFD	; 253
 1c0:	9b b9       	out	0x0b, r25	; 11
 1c2:	87 e8       	ldi	r24, 0x87	; 135
 1c4:	93 e1       	ldi	r25, 0x13	; 19
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCD_Print+0x64>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <LCD_Print+0x6a>
 1cc:	00 00       	nop
 1ce:	6f 5f       	subi	r22, 0xFF	; 255
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255
 1d2:	df 01       	movw	r26, r30
 1d4:	a6 0f       	add	r26, r22
 1d6:	b7 1f       	adc	r27, r23
 1d8:	9c 91       	ld	r25, X
 1da:	91 11       	cpse	r25, r1
 1dc:	c6 cf       	rjmp	.-116    	; 0x16a <LCD_Print+0x8>
 1de:	08 95       	ret

000001e0 <main>:
	//DDRB = 0xFF ;
/*or(int i =0 ;i<3 ; i++){
		BIT_SET(DDRB,i);
		BIT_CLEAR(DDRD,i);
	} */
	DDRB = 0xff;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00000000;
 1e4:	17 b8       	out	0x07, r1	; 7
	DDRD=0xFF; // set PD as output port
 1e6:	8a b9       	out	0x0a, r24	; 10
	DDRB=0xFF; //Set PB as output port
 1e8:	84 b9       	out	0x04, r24	; 4
	LCD_Init(); //Activate LCD
 1ea:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Init>
	LCD_Print("Hello user ");
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_Print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	2f e3       	ldi	r18, 0x3F	; 63
 1f8:	8d e0       	ldi	r24, 0x0D	; 13
 1fa:	93 e0       	ldi	r25, 0x03	; 3
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x1c>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x26>
 206:	00 00       	nop
	_delay_ms(100);
	LCD_Clear();
 208:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_Clear>
	LCD_Print("AUBAI");
 20c:	8c e0       	ldi	r24, 0x0C	; 12
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_Print>
 214:	2f e3       	ldi	r18, 0x3F	; 63
 216:	8d e0       	ldi	r24, 0x0D	; 13
 218:	93 e0       	ldi	r25, 0x03	; 3
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0x3a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x44>
 224:	00 00       	nop
	_delay_ms(100);
	LCD_Clear();
 226:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_Clear>
	PORTB=0x00;
 22a:	15 b8       	out	0x05, r1	; 5
		/*	if(BIT_CHECK(PINC,0) == 1){
		  ADCSRA |= (1<<ADSC); //start conversion
		  while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
		  adcValue = ADCH;// read the ADC high byte
		  OCR0A =adcValue;}*/
			if (BIT_CHECK(PINC,0) == 1) { 				
 22c:	30 9b       	sbis	0x06, 0	; 6
 22e:	52 c0       	rjmp	.+164    	; 0x2d4 <main+0xf4>
					ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);// enable A/D, and
 230:	ca e7       	ldi	r28, 0x7A	; 122
 232:	d0 e0       	ldi	r29, 0x00	; 0
 234:	85 e8       	ldi	r24, 0x85	; 133
 236:	88 83       	st	Y, r24

					ADMUX=0x25; // choose input channel 5, and left adjust result
 238:	85 e2       	ldi	r24, 0x25	; 37
 23a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
					TCCR0A |= (1 << WGM00)| (1 << WGM02); // set timer mode to PWM (5)
 23e:	84 b5       	in	r24, 0x24	; 36
 240:	89 60       	ori	r24, 0x09	; 9
 242:	84 bd       	out	0x24, r24	; 36
					TCCR0A |= (1<<COM0A0)| (1<<COM0A1); // Inverting on OC0A
 244:	84 b5       	in	r24, 0x24	; 36
 246:	80 6c       	ori	r24, 0xC0	; 192
 248:	84 bd       	out	0x24, r24	; 36
					TCCR0B |= (1 << CS02) | (1 << CS00);
 24a:	85 b5       	in	r24, 0x25	; 37
 24c:	85 60       	ori	r24, 0x05	; 5
 24e:	85 bd       	out	0x25, r24	; 37
				
				
				LCD_Print("Feeder delay_10s");
 250:	82 e1       	ldi	r24, 0x12	; 18
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_Print>
 258:	2f e3       	ldi	r18, 0x3F	; 63
 25a:	8d e0       	ldi	r24, 0x0D	; 13
 25c:	93 e0       	ldi	r25, 0x03	; 3
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <main+0x7e>
 266:	00 c0       	rjmp	.+0      	; 0x268 <main+0x88>
 268:	00 00       	nop
				_delay_ms(100);

				BIT_CLEAR(PORTB,2);
 26a:	85 b1       	in	r24, 0x05	; 5
 26c:	8b 7f       	andi	r24, 0xFB	; 251
 26e:	85 b9       	out	0x05, r24	; 5
				BIT_SET(PORTB,0);
 270:	85 b1       	in	r24, 0x05	; 5
 272:	81 60       	ori	r24, 0x01	; 1
 274:	85 b9       	out	0x05, r24	; 5
				BIT_SET(PORTB,3);
 276:	85 b1       	in	r24, 0x05	; 5
 278:	88 60       	ori	r24, 0x08	; 8
 27a:	85 b9       	out	0x05, r24	; 5
 27c:	2f e3       	ldi	r18, 0x3F	; 63
 27e:	87 e7       	ldi	r24, 0x77	; 119
 280:	9b e1       	ldi	r25, 0x1B	; 27
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0xa2>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0xac>
 28c:	00 00       	nop
				_delay_ms(900);
				BIT_CLEAR(PORTB,3);
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	87 7f       	andi	r24, 0xF7	; 247
 292:	85 b9       	out	0x05, r24	; 5
				BIT_SET(PORTB,0);
 294:	85 b1       	in	r24, 0x05	; 5
 296:	81 60       	ori	r24, 0x01	; 1
 298:	85 b9       	out	0x05, r24	; 5
				BIT_SET(PORTB,2);
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	84 60       	ori	r24, 0x04	; 4
 29e:	85 b9       	out	0x05, r24	; 5
 2a0:	2f e7       	ldi	r18, 0x7F	; 127
 2a2:	8a e1       	ldi	r24, 0x1A	; 26
 2a4:	96 e0       	ldi	r25, 0x06	; 6
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0xc6>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0xd0>
 2b0:	00 00       	nop
				_delay_ms(200);
				LCD_Clear();
 2b2:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_Clear>
				ADCSRA |= (1<<ADSC); //start conversion
 2b6:	88 81       	ld	r24, Y
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	88 83       	st	Y, r24
				while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
 2bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 2c0:	86 fd       	sbrc	r24, 6
 2c2:	fc cf       	rjmp	.-8      	; 0x2bc <main+0xdc>
				adcValue = ADCH;// read the ADC high byte
 2c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2c8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <adcValue>
				OCR0A =adcValue;
 2cc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <adcValue>
 2d0:	87 bd       	out	0x27, r24	; 39
 2d2:	ac cf       	rjmp	.-168    	; 0x22c <main+0x4c>
				} // Button 1 pressed

			else if (BIT_CHECK(PINC,1) == 1) {
 2d4:	86 b1       	in	r24, 0x06	; 6
								while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
								adcValue = ADCH;// read the ADC high byte
								OCR0A =adcValue;
				} // Button 2 pressed

			else if (BIT_CHECK(PINC,2) == 1) {
 2d6:	86 b1       	in	r24, 0x06	; 6
 2d8:	a9 cf       	rjmp	.-174    	; 0x22c <main+0x4c>

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
