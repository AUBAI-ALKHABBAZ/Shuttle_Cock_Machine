
relay_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b6  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f9  00000000  00000000  00000c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ff  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000011a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 1000000UL 
#include <avr/io.h>
#include <avr/delay.h>
int main(void)
{
	DDRC &= ~(1 << PC0);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	84 bb       	out	0x14, r24	; 20
	DDRC &= ~(1 << PC1);
  72:	84 b3       	in	r24, 0x14	; 20
  74:	8d 7f       	andi	r24, 0xFD	; 253
  76:	84 bb       	out	0x14, r24	; 20
	//DDRC=0b11111111;
	//DDRA=0b11100000;
	PORTC |= (1 << PC0)|(1 << PC1); 
  78:	85 b3       	in	r24, 0x15	; 21
  7a:	83 60       	ori	r24, 0x03	; 3
  7c:	85 bb       	out	0x15, r24	; 21
	DDRA|= (1 << PA5)|(1 << PA6)|(1 << PA7);
  7e:	8a b3       	in	r24, 0x1a	; 26
  80:	80 6e       	ori	r24, 0xE0	; 224
  82:	8a bb       	out	0x1a, r24	; 26
	
    /* Replace with your application code */
    while (1) 
    {
		if((PINC & (1<<0))==0)
  84:	98 99       	sbic	0x13, 0	; 19
  86:	09 c0       	rjmp	.+18     	; 0x9a <main+0x2e>
		{
		PORTA |= (1<<PA5); 
  88:	8b b3       	in	r24, 0x1b	; 27
  8a:	80 62       	ori	r24, 0x20	; 32
  8c:	8b bb       	out	0x1b, r24	; 27
		PORTA |= (1<<PA6); 
  8e:	8b b3       	in	r24, 0x1b	; 27
  90:	80 64       	ori	r24, 0x40	; 64
  92:	8b bb       	out	0x1b, r24	; 27
		PORTA &= ~ (1<<PA7);  
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	8b bb       	out	0x1b, r24	; 27
		//PORTA=0b01100000;
			//PORTA |= (1<<6);
		}
		if((PINC & (1<<1))==0)
  9a:	99 99       	sbic	0x13, 1	; 19
  9c:	f3 cf       	rjmp	.-26     	; 0x84 <main+0x18>
		{
			PORTA &= ~ (1<<PA5);
  9e:	8b b3       	in	r24, 0x1b	; 27
  a0:	8f 7d       	andi	r24, 0xDF	; 223
  a2:	8b bb       	out	0x1b, r24	; 27
			PORTA &= ~ (1<<PA6);
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	8f 7b       	andi	r24, 0xBF	; 191
  a8:	8b bb       	out	0x1b, r24	; 27
			PORTA |= (1<<PA7);
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	e9 cf       	rjmp	.-46     	; 0x84 <main+0x18>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
