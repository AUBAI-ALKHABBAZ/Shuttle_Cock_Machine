
ADC_resistor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000012a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005cd  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000555  00000000  00000000  00000785  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f7  00000000  00000000  00000cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000306  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#define F_CPU 1000000UL
#include <avr/io.h>
volatile uint8_t adcValue;
int main(void)
{
	DDRA = 0x00;
  7c:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0xff;
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	84 bb       	out	0x14, r24	; 20
	ADCSRA |= (1 << ADEN); 
  82:	86 b1       	in	r24, 0x06	; 6
  84:	80 68       	ori	r24, 0x80	; 128
  86:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1);
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	83 60       	ori	r24, 0x03	; 3
  8c:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1 << ADLAR); 
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	80 62       	ori	r24, 0x20	; 32
  92:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1 << MUX0); 
  94:	87 b1       	in	r24, 0x07	; 7
  96:	81 60       	ori	r24, 0x01	; 1
  98:	87 b9       	out	0x07, r24	; 7
    /* Replace with your application code */
    while (1) 
    {
		ADCSRA |= (1 << ADSC);
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	86 b9       	out	0x06, r24	; 6
		
		while(ADCSRA & (1<<ADSC));
  a0:	36 99       	sbic	0x06, 6	; 6
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <main+0x24>
		
		adcValue = ADCH;
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		PORTC = adcValue;
  aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ae:	85 bb       	out	0x15, r24	; 21
    }
  b0:	f4 cf       	rjmp	.-24     	; 0x9a <main+0x1e>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
