
USART_send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000689  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005de  00000000  00000000  00000835  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027c  00000000  00000000  00000e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
    /* Replace with your application code */
	DDRC &= ~((1<<PC0) | (1<<PC3)); // ßÏÎá áÊÚãá ÇáØÑÇÝ ÖÈØ
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	86 7f       	andi	r24, 0xF6	; 246
  70:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<PC0) | (1<<PC3); //ÇáÑÝÚ ãÞÇæãÉ ÊÝÚíá
  72:	85 b3       	in	r24, 0x15	; 21
  74:	89 60       	ori	r24, 0x09	; 9
  76:	85 bb       	out	0x15, r24	; 21
	uint16_t UBRR_Value = 103;
	UBRRL = (uint8_t) UBRR_Value;
  78:	87 e6       	ldi	r24, 0x67	; 103
  7a:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t) (UBRR_Value >> 8);
  7c:	10 bc       	out	0x20, r1	; 32
	UCSRB = (1<<RXEN) | (1<<TXEN);
  7e:	88 e1       	ldi	r24, 0x18	; 24
  80:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (3<<UCSZ0);
  82:	80 b5       	in	r24, 0x20	; 32
  84:	86 60       	ori	r24, 0x06	; 6
  86:	80 bd       	out	0x20, r24	; 32
    while (1) 
    {
		if(bit_is_clear(PINC,0))
  88:	98 99       	sbic	0x13, 0	; 19
  8a:	0d c0       	rjmp	.+26     	; 0xa6 <main+0x3a>
		{
			while(!(UCSRA & (1<<UDRE)));
  8c:	5d 9b       	sbis	0x0b, 5	; 11
  8e:	fe cf       	rjmp	.-4      	; 0x8c <main+0x20>
			UDR = 'N';
  90:	8e e4       	ldi	r24, 0x4E	; 78
  92:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	85 ea       	ldi	r24, 0xA5	; 165
  98:	9e e0       	ldi	r25, 0x0E	; 14
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x2e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
			_delay_ms(300);
		}
		if(bit_is_clear(PINC,3))
  a6:	9b 99       	sbic	0x13, 3	; 19
  a8:	ef cf       	rjmp	.-34     	; 0x88 <main+0x1c>
		{
			while(!(UCSRA & (1<<UDRE)));
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <main+0x3e>
			UDR = 'F';
  ae:	86 e4       	ldi	r24, 0x46	; 70
  b0:	8c b9       	out	0x0c, r24	; 12
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	85 ea       	ldi	r24, 0xA5	; 165
  b6:	9e e0       	ldi	r25, 0x0E	; 14
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x4c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x56>
  c2:	00 00       	nop
  c4:	e1 cf       	rjmp	.-62     	; 0x88 <main+0x1c>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
