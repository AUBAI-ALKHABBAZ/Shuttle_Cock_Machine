
PWM_model.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000693  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  0000084b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021b  00000000  00000000  00000e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037c  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <util/delay.h>
volatile uint8_t adcValue;

int main(void)
{
DDRD=0xFF; // set PD as output port
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
DDRB=0xFF; //Set PB as output port
  94:	84 b9       	out	0x04, r24	; 4
PORTB=0x00;
  96:	15 b8       	out	0x05, r1	; 5
ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);// enable A/D, and
  98:	85 e8       	ldi	r24, 0x85	; 133
  9a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

ADMUX=0x25; // choose input channel 5, and left adjust result
  9e:	85 e2       	ldi	r24, 0x25	; 37
  a0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
TCCR0A |= (1 << WGM00)| (1 << WGM02); // set timer mode to PWM (5)
  a4:	84 b5       	in	r24, 0x24	; 36
  a6:	89 60       	ori	r24, 0x09	; 9
  a8:	84 bd       	out	0x24, r24	; 36
TCCR0A |= (1<<COM0A0)| (1<<COM0A1); // Inverting on OC0A
  aa:	84 b5       	in	r24, 0x24	; 36
  ac:	80 6c       	ori	r24, 0xC0	; 192
  ae:	84 bd       	out	0x24, r24	; 36
TCCR0B |= (1 << CS02) | (1 << CS00); 
  b0:	85 b5       	in	r24, 0x25	; 37
  b2:	85 60       	ori	r24, 0x05	; 5
  b4:	85 bd       	out	0x25, r24	; 37
    while (1) 
    {
		ADCSRA |= (1<<ADSC); //start conversion
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
		while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
  c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c4:	86 fd       	sbrc	r24, 6
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <main+0x30>
		OCR0A = ADCH; // read the ADC high byte
  c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  cc:	87 bd       	out	0x27, r24	; 39
    }
  ce:	f3 cf       	rjmp	.-26     	; 0xb6 <main+0x26>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
