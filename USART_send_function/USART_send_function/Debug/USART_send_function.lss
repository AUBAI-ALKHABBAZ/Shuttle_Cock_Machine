
USART_send_function.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001b8  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000747  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065b  00000000  00000000  00000a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009f  00000000  00000000  00001739  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  7a:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_init>:
#define F_CPU 16000000
#include <avr/io.h>
#include <util/delay.h>
#include <math.h>
void UART_init()
{	uint16_t UBRR_Value = lrint ( (F_CPU / (16L * 9600) ) -1);
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	8e ec       	ldi	r24, 0xCE	; 206
  88:	92 e4       	ldi	r25, 0x42	; 66
  8a:	0e 94 74 00 	call	0xe8	; 0xe8 <lrint>
	UBRRL = (uint8_t) UBRR_Value;
  8e:	69 b9       	out	0x09, r22	; 9
	UBRRH = (uint8_t) (UBRR_Value >> 8);
  90:	70 bd       	out	0x20, r23	; 32
	UCSRB = (1<<RXEN) | (1<<TXEN);
  92:	88 e1       	ldi	r24, 0x18	; 24
  94:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (3<<UCSZ0);}
  96:	80 b5       	in	r24, 0x20	; 32
  98:	86 60       	ori	r24, 0x06	; 6
  9a:	80 bd       	out	0x20, r24	; 32
  9c:	08 95       	ret

0000009e <UART_send_char>:
void UART_send_char(char data)
{
	while( ! (UCSRA & (1<<UDRE) ) );
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <UART_send_char>
	UDR = data;
  a2:	8c b9       	out	0x0c, r24	; 12
  a4:	08 95       	ret

000000a6 <UART_send_string>:
}
void UART_send_string(char *data)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
	while(*data > 0)
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <UART_send_string+0xe>
	UART_send_char(*data++);
  ae:	21 96       	adiw	r28, 0x01	; 1
  b0:	0e 94 4f 00 	call	0x9e	; 0x9e <UART_send_char>
	while( ! (UCSRA & (1<<UDRE) ) );
	UDR = data;
}
void UART_send_string(char *data)
{
	while(*data > 0)
  b4:	88 81       	ld	r24, Y
  b6:	81 11       	cpse	r24, r1
  b8:	fa cf       	rjmp	.-12     	; 0xae <UART_send_string+0x8>
	UART_send_char(*data++);
	UART_send_char('\0');
  ba:	0e 94 4f 00 	call	0x9e	; 0x9e <UART_send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	83 ec       	ldi	r24, 0xC3	; 195
  c2:	99 e0       	ldi	r25, 0x09	; 9
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <UART_send_string+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <UART_send_string+0x28>
  ce:	00 00       	nop
	_delay_ms(200);
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <main>:

int main(void)
{
	 UART_init(9600) ;
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	95 e2       	ldi	r25, 0x25	; 37
  da:	0e 94 41 00 	call	0x82	; 0x82 <UART_init>
    while (1) 
    {
	UART_send_string("AUBAI");
  de:	80 e6       	ldi	r24, 0x60	; 96
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_send_string>
  e6:	fb cf       	rjmp	.-10     	; 0xde <main+0x8>

000000e8 <lrint>:
  e8:	0e 94 b9 00 	call	0x172	; 0x172 <__fp_splitA>
  ec:	a8 f1       	brcs	.+106    	; 0x158 <lrint+0x70>
  ee:	9e 57       	subi	r25, 0x7E	; 126
  f0:	b0 f1       	brcs	.+108    	; 0x15e <lrint+0x76>
  f2:	98 51       	subi	r25, 0x18	; 24
  f4:	60 f0       	brcs	.+24     	; 0x10e <lrint+0x26>
  f6:	39 f1       	breq	.+78     	; 0x146 <lrint+0x5e>
  f8:	98 30       	cpi	r25, 0x08	; 8
  fa:	70 f5       	brcc	.+92     	; 0x158 <lrint+0x70>
  fc:	09 2e       	mov	r0, r25
  fe:	99 27       	eor	r25, r25
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	88 1f       	adc	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	0a 94       	dec	r0
 10a:	d1 f7       	brne	.-12     	; 0x100 <lrint+0x18>
 10c:	1c c0       	rjmp	.+56     	; 0x146 <lrint+0x5e>
 10e:	bb 27       	eor	r27, r27
 110:	99 3f       	cpi	r25, 0xF9	; 249
 112:	4c f4       	brge	.+18     	; 0x126 <lrint+0x3e>
 114:	b1 11       	cpse	r27, r1
 116:	b1 e0       	ldi	r27, 0x01	; 1
 118:	b6 2b       	or	r27, r22
 11a:	67 2f       	mov	r22, r23
 11c:	78 2f       	mov	r23, r24
 11e:	88 27       	eor	r24, r24
 120:	98 5f       	subi	r25, 0xF8	; 248
 122:	b1 f7       	brne	.-20     	; 0x110 <lrint+0x28>
 124:	08 c0       	rjmp	.+16     	; 0x136 <lrint+0x4e>
 126:	86 95       	lsr	r24
 128:	77 95       	ror	r23
 12a:	67 95       	ror	r22
 12c:	b7 95       	ror	r27
 12e:	08 f4       	brcc	.+2      	; 0x132 <lrint+0x4a>
 130:	b1 60       	ori	r27, 0x01	; 1
 132:	93 95       	inc	r25
 134:	c1 f7       	brne	.-16     	; 0x126 <lrint+0x3e>
 136:	bb 0f       	add	r27, r27
 138:	30 f4       	brcc	.+12     	; 0x146 <lrint+0x5e>
 13a:	11 f4       	brne	.+4      	; 0x140 <lrint+0x58>
 13c:	60 ff       	sbrs	r22, 0
 13e:	03 c0       	rjmp	.+6      	; 0x146 <lrint+0x5e>
 140:	6f 5f       	subi	r22, 0xFF	; 255
 142:	7f 4f       	sbci	r23, 0xFF	; 255
 144:	8f 4f       	sbci	r24, 0xFF	; 255
 146:	3e f4       	brtc	.+14     	; 0x156 <lrint+0x6e>
 148:	90 95       	com	r25
 14a:	80 95       	com	r24
 14c:	70 95       	com	r23
 14e:	61 95       	neg	r22
 150:	7f 4f       	sbci	r23, 0xFF	; 255
 152:	8f 4f       	sbci	r24, 0xFF	; 255
 154:	9f 4f       	sbci	r25, 0xFF	; 255
 156:	08 95       	ret
 158:	68 94       	set
 15a:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__fp_szero>
 15e:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__fp_zero>

00000162 <__fp_split3>:
 162:	57 fd       	sbrc	r21, 7
 164:	90 58       	subi	r25, 0x80	; 128
 166:	44 0f       	add	r20, r20
 168:	55 1f       	adc	r21, r21
 16a:	59 f0       	breq	.+22     	; 0x182 <__fp_splitA+0x10>
 16c:	5f 3f       	cpi	r21, 0xFF	; 255
 16e:	71 f0       	breq	.+28     	; 0x18c <__fp_splitA+0x1a>
 170:	47 95       	ror	r20

00000172 <__fp_splitA>:
 172:	88 0f       	add	r24, r24
 174:	97 fb       	bst	r25, 7
 176:	99 1f       	adc	r25, r25
 178:	61 f0       	breq	.+24     	; 0x192 <__fp_splitA+0x20>
 17a:	9f 3f       	cpi	r25, 0xFF	; 255
 17c:	79 f0       	breq	.+30     	; 0x19c <__fp_splitA+0x2a>
 17e:	87 95       	ror	r24
 180:	08 95       	ret
 182:	12 16       	cp	r1, r18
 184:	13 06       	cpc	r1, r19
 186:	14 06       	cpc	r1, r20
 188:	55 1f       	adc	r21, r21
 18a:	f2 cf       	rjmp	.-28     	; 0x170 <__fp_split3+0xe>
 18c:	46 95       	lsr	r20
 18e:	f1 df       	rcall	.-30     	; 0x172 <__fp_splitA>
 190:	08 c0       	rjmp	.+16     	; 0x1a2 <__fp_splitA+0x30>
 192:	16 16       	cp	r1, r22
 194:	17 06       	cpc	r1, r23
 196:	18 06       	cpc	r1, r24
 198:	99 1f       	adc	r25, r25
 19a:	f1 cf       	rjmp	.-30     	; 0x17e <__fp_splitA+0xc>
 19c:	86 95       	lsr	r24
 19e:	71 05       	cpc	r23, r1
 1a0:	61 05       	cpc	r22, r1
 1a2:	08 94       	sec
 1a4:	08 95       	ret

000001a6 <__fp_zero>:
 1a6:	e8 94       	clt

000001a8 <__fp_szero>:
 1a8:	bb 27       	eor	r27, r27
 1aa:	66 27       	eor	r22, r22
 1ac:	77 27       	eor	r23, r23
 1ae:	cb 01       	movw	r24, r22
 1b0:	97 f9       	bld	r25, 7
 1b2:	08 95       	ret

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
